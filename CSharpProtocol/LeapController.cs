// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace hu.midicontroller.protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class LeapController {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_hu_midicontroller_protocol_FingersPosition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hu.midicontroller.protocol.FingersPosition, global::hu.midicontroller.protocol.FingersPosition.Builder> internal__static_hu_midicontroller_protocol_FingersPosition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hu_midicontroller_protocol_FingersPosition_Finger__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hu.midicontroller.protocol.FingersPosition.Types.Finger, global::hu.midicontroller.protocol.FingersPosition.Types.Finger.Builder> internal__static_hu_midicontroller_protocol_FingersPosition_Finger__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static LeapController() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Ch1Qcm90b2NvbC9MZWFwQ29udHJvbGxlci5wcm90bxIaaHUubWlkaWNvbnRy" + 
          "b2xsZXIucHJvdG9jb2wijQEKD0ZpbmdlcnNQb3NpdGlvbhJDCgdmaW5nZXJz" + 
          "GAEgAygLMjIuaHUubWlkaWNvbnRyb2xsZXIucHJvdG9jb2wuRmluZ2Vyc1Bv" + 
          "c2l0aW9uLkZpbmdlcho1CgZGaW5nZXISFgoOZmluZ2VyUG9zaXRpb24YASAC" + 
          "KAUSEwoLdGFwSGFwcGVuZWQYAiABKAg=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_hu_midicontroller_protocol_FingersPosition__Descriptor = Descriptor.MessageTypes[0];
        internal__static_hu_midicontroller_protocol_FingersPosition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hu.midicontroller.protocol.FingersPosition, global::hu.midicontroller.protocol.FingersPosition.Builder>(internal__static_hu_midicontroller_protocol_FingersPosition__Descriptor,
                new string[] { "Fingers", });
        internal__static_hu_midicontroller_protocol_FingersPosition_Finger__Descriptor = internal__static_hu_midicontroller_protocol_FingersPosition__Descriptor.NestedTypes[0];
        internal__static_hu_midicontroller_protocol_FingersPosition_Finger__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hu.midicontroller.protocol.FingersPosition.Types.Finger, global::hu.midicontroller.protocol.FingersPosition.Types.Finger.Builder>(internal__static_hu_midicontroller_protocol_FingersPosition_Finger__Descriptor,
                new string[] { "FingerPosition", "TapHappened", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FingersPosition : pb::GeneratedMessage<FingersPosition, FingersPosition.Builder> {
    private FingersPosition() { }
    private static readonly FingersPosition defaultInstance = new FingersPosition().MakeReadOnly();
    private static readonly string[] _fingersPositionFieldNames = new string[] { "fingers" };
    private static readonly uint[] _fingersPositionFieldTags = new uint[] { 10 };
    public static FingersPosition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FingersPosition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FingersPosition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hu.midicontroller.protocol.LeapController.internal__static_hu_midicontroller_protocol_FingersPosition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FingersPosition, FingersPosition.Builder> InternalFieldAccessors {
      get { return global::hu.midicontroller.protocol.LeapController.internal__static_hu_midicontroller_protocol_FingersPosition__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Finger : pb::GeneratedMessage<Finger, Finger.Builder> {
        private Finger() { }
        private static readonly Finger defaultInstance = new Finger().MakeReadOnly();
        private static readonly string[] _fingerFieldNames = new string[] { "fingerPosition", "tapHappened" };
        private static readonly uint[] _fingerFieldTags = new uint[] { 8, 16 };
        public static Finger DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Finger DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Finger ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::hu.midicontroller.protocol.LeapController.internal__static_hu_midicontroller_protocol_FingersPosition_Finger__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Finger, Finger.Builder> InternalFieldAccessors {
          get { return global::hu.midicontroller.protocol.LeapController.internal__static_hu_midicontroller_protocol_FingersPosition_Finger__FieldAccessorTable; }
        }
        
        public const int FingerPositionFieldNumber = 1;
        private bool hasFingerPosition;
        private int fingerPosition_;
        public bool HasFingerPosition {
          get { return hasFingerPosition; }
        }
        public int FingerPosition {
          get { return fingerPosition_; }
        }
        
        public const int TapHappenedFieldNumber = 2;
        private bool hasTapHappened;
        private bool tapHappened_;
        public bool HasTapHappened {
          get { return hasTapHappened; }
        }
        public bool TapHappened {
          get { return tapHappened_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasFingerPosition) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _fingerFieldNames;
          if (hasFingerPosition) {
            output.WriteInt32(1, field_names[0], FingerPosition);
          }
          if (hasTapHappened) {
            output.WriteBool(2, field_names[1], TapHappened);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasFingerPosition) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, FingerPosition);
            }
            if (hasTapHappened) {
              size += pb::CodedOutputStream.ComputeBoolSize(2, TapHappened);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Finger ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Finger ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Finger ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Finger ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Finger ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Finger ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Finger ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Finger ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Finger ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Finger ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Finger MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Finger prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Finger, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Finger cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Finger result;
          
          private Finger PrepareBuilder() {
            if (resultIsReadOnly) {
              Finger original = result;
              result = new Finger();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Finger MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::hu.midicontroller.protocol.FingersPosition.Types.Finger.Descriptor; }
          }
          
          public override Finger DefaultInstanceForType {
            get { return global::hu.midicontroller.protocol.FingersPosition.Types.Finger.DefaultInstance; }
          }
          
          public override Finger BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Finger) {
              return MergeFrom((Finger) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Finger other) {
            if (other == global::hu.midicontroller.protocol.FingersPosition.Types.Finger.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasFingerPosition) {
              FingerPosition = other.FingerPosition;
            }
            if (other.HasTapHappened) {
              TapHappened = other.TapHappened;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_fingerFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _fingerFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasFingerPosition = input.ReadInt32(ref result.fingerPosition_);
                  break;
                }
                case 16: {
                  result.hasTapHappened = input.ReadBool(ref result.tapHappened_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasFingerPosition {
            get { return result.hasFingerPosition; }
          }
          public int FingerPosition {
            get { return result.FingerPosition; }
            set { SetFingerPosition(value); }
          }
          public Builder SetFingerPosition(int value) {
            PrepareBuilder();
            result.hasFingerPosition = true;
            result.fingerPosition_ = value;
            return this;
          }
          public Builder ClearFingerPosition() {
            PrepareBuilder();
            result.hasFingerPosition = false;
            result.fingerPosition_ = 0;
            return this;
          }
          
          public bool HasTapHappened {
            get { return result.hasTapHappened; }
          }
          public bool TapHappened {
            get { return result.TapHappened; }
            set { SetTapHappened(value); }
          }
          public Builder SetTapHappened(bool value) {
            PrepareBuilder();
            result.hasTapHappened = true;
            result.tapHappened_ = value;
            return this;
          }
          public Builder ClearTapHappened() {
            PrepareBuilder();
            result.hasTapHappened = false;
            result.tapHappened_ = false;
            return this;
          }
        }
        static Finger() {
          object.ReferenceEquals(global::hu.midicontroller.protocol.LeapController.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int FingersFieldNumber = 1;
    private pbc::PopsicleList<global::hu.midicontroller.protocol.FingersPosition.Types.Finger> fingers_ = new pbc::PopsicleList<global::hu.midicontroller.protocol.FingersPosition.Types.Finger>();
    public scg::IList<global::hu.midicontroller.protocol.FingersPosition.Types.Finger> FingersList {
      get { return fingers_; }
    }
    public int FingersCount {
      get { return fingers_.Count; }
    }
    public global::hu.midicontroller.protocol.FingersPosition.Types.Finger GetFingers(int index) {
      return fingers_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hu.midicontroller.protocol.FingersPosition.Types.Finger element in FingersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fingersPositionFieldNames;
      if (fingers_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], fingers_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hu.midicontroller.protocol.FingersPosition.Types.Finger element in FingersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FingersPosition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FingersPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FingersPosition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FingersPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FingersPosition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FingersPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FingersPosition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FingersPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FingersPosition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FingersPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FingersPosition MakeReadOnly() {
      fingers_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FingersPosition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FingersPosition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FingersPosition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FingersPosition result;
      
      private FingersPosition PrepareBuilder() {
        if (resultIsReadOnly) {
          FingersPosition original = result;
          result = new FingersPosition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FingersPosition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hu.midicontroller.protocol.FingersPosition.Descriptor; }
      }
      
      public override FingersPosition DefaultInstanceForType {
        get { return global::hu.midicontroller.protocol.FingersPosition.DefaultInstance; }
      }
      
      public override FingersPosition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FingersPosition) {
          return MergeFrom((FingersPosition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FingersPosition other) {
        if (other == global::hu.midicontroller.protocol.FingersPosition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.fingers_.Count != 0) {
          result.fingers_.Add(other.fingers_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fingersPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fingersPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.fingers_, global::hu.midicontroller.protocol.FingersPosition.Types.Finger.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hu.midicontroller.protocol.FingersPosition.Types.Finger> FingersList {
        get { return PrepareBuilder().fingers_; }
      }
      public int FingersCount {
        get { return result.FingersCount; }
      }
      public global::hu.midicontroller.protocol.FingersPosition.Types.Finger GetFingers(int index) {
        return result.GetFingers(index);
      }
      public Builder SetFingers(int index, global::hu.midicontroller.protocol.FingersPosition.Types.Finger value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fingers_[index] = value;
        return this;
      }
      public Builder SetFingers(int index, global::hu.midicontroller.protocol.FingersPosition.Types.Finger.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.fingers_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFingers(global::hu.midicontroller.protocol.FingersPosition.Types.Finger value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fingers_.Add(value);
        return this;
      }
      public Builder AddFingers(global::hu.midicontroller.protocol.FingersPosition.Types.Finger.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.fingers_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFingers(scg::IEnumerable<global::hu.midicontroller.protocol.FingersPosition.Types.Finger> values) {
        PrepareBuilder();
        result.fingers_.Add(values);
        return this;
      }
      public Builder ClearFingers() {
        PrepareBuilder();
        result.fingers_.Clear();
        return this;
      }
    }
    static FingersPosition() {
      object.ReferenceEquals(global::hu.midicontroller.protocol.LeapController.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
